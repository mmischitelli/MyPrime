name: Create Release with Binaries

on:
  push:
    tags:
      - 'v*' # Il workflow verrÃ  attivato quando spingi un tag che inizia con 'v'
  workflow_dispatch: # Consente anche l'esecuzione manuale del workflow

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            artifact_name: myprime-windows
            binary_extension: .exe
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            artifact_name: myprime-linux
            binary_extension: ""
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
    
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        # Estrai la versione dal tag (rimuovi la 'v' iniziale)
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "version=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"
        else
          echo "version=dev-build" >> "$GITHUB_OUTPUT"
        fi
        
    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        
    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
      
    - name: Package Binary
      shell: bash
      run: |
        mkdir -p dist
        # Copia il binario nella cartella dist
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          cp ${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/my_prime${{ matrix.binary_extension }} dist/${{ matrix.artifact_name }}-${{ steps.strings.outputs.version }}${{ matrix.binary_extension }}
        else
          cp ${{ steps.strings.outputs.build-output-dir }}/my_prime${{ matrix.binary_extension }} dist/${{ matrix.artifact_name }}-${{ steps.strings.outputs.version }}${{ matrix.binary_extension }}
        fi
        
    - name: Upload Artifacts for Release
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/${{ matrix.artifact_name }}-${{ steps.strings.outputs.version }}${{ matrix.binary_extension }}
        retention-days: 1
        
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    # Esegui solo quando viene spinto un tag
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Display Artifacts Structure
        run: ls -R artifacts
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: artifacts/**/*
          generate_release_notes: true